import { useState, useEffect, useRef } from 'react';
import {
  BrowserRouter as Router,
  Routes,
  Route,
  useNavigate,
  useLocation,
  Navigate,
  useParams,
  Link,
} from 'react-router-dom';

import chatIcon from './assets/chat.svg';
import historyIcon from './assets/history.svg';
import homeIcon from './assets/home.svg';
import profileIcon from './assets/profile.svg';
import helpIcon from './assets/help.svg';
import stone from "./stone.png"
import plus from "./plus.svg"
import teacher from "./teacher.png"


function App() {
  return (
    <Router>
      <MainLayout />
    </Router>
  );
}
function MainLayout() {
  const location = useLocation();

  useEffect(() => {
    if (window.Telegram?.WebApp) {
      window.Telegram.WebApp.ready();
      window.Telegram.WebApp.expand();
    }
  }, []);

  const currentPath = location.pathname;
  const isChatPage = currentPath.startsWith('/chat/'); // <-- –ø—Ä–æ–≤–µ—Ä–∫–∞

  return (
    <div className="app">
      <div className="page-content">
        <Routes>
          <Route path="/" element={<HomePage />} />
          <Route path="/requests" element={<RequestsPage />} />
          <Route path="/history" element={<HistoryPage />} />
          <Route path="/profile" element={<ProfilePage />} />
          <Route path="/help" element={<HelpPage />} />
          <Route path="/chat/:chatId" element={<ChatPage />} />
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </div>

      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–∞ */}
      {!isChatPage && (
        <div className="bottom-menu">
          <MenuItem icon={chatIcon} label="–ó–∞–ø—Ä–æ—Å—ã" path="/requests" currentPath={currentPath} />
          <MenuItem icon={historyIcon} label="–ò—Å—Ç–æ—Ä–∏—è" path="/history" currentPath={currentPath} />
          <MenuItem icon={homeIcon} label="–ì–ª–∞–≤–Ω–∞—è" path="/" currentPath={currentPath} />
          <MenuItem icon={profileIcon} label="–ü—Ä–æ—Ñ–∏–ª—å" path="/profile" currentPath={currentPath} />
          <MenuItem icon={helpIcon} label="–ü–æ–º–æ—â—å" path="/help" currentPath={currentPath} />
        </div>
      )}
    </div>
  );
}


function MenuItem({ icon, label, path, currentPath }) {
  const active = currentPath === path;

  return (
    <Link to={path} className="menu-item-link">
      <div className="menu-item">
        <div className={`menu-icon ${active ? 'active' : ''}`}>
          <img
            src={icon}
            alt={label}
            className={`icon-image ${active ? 'white-icon' : ''}`}
          />
        </div>
        <div className={`menu-label ${active ? 'active-label' : ''}`}>
          {label}
        </div>
      </div>
    </Link>
  );
}

function HomePage() {
  const [input, setInput] = useState('');
  const isInputFilled = input.trim().length > 0;

  const navigate = useNavigate();

const handleSolveTask = () => {
  if (!isInputFilled) return;

  const chatId = Date.now().toString(); // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞)

  navigate(`/chat/${chatId}`, {
    state: { userMessage: input.trim() },
  });

  setInput('');
};

  return (
    <>
      <div className="textarea-wrapper">
        <textarea
          className="textarea"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder={`–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ –∑–∞–¥–∞—á—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å\n–ø–æ –ª—é–±–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É.\n–†–µ—à—É, –æ–±—ä—è—Å–Ω—é –∏ –ø–æ–∫–∞–∂—É\n–≤—Å–µ –ø–æ —à–∞–≥–∞–º.`}
        />
      </div>

<div className="balance-wrapper">
  <div className="balance-top">
    <span className="balance-label">–ú–æ–π –±–∞–ª–∞–Ω—Å</span>
    <img src={plus}/>
  </div>

  <div className="bottom-action-row">
    <div className="crystal-block">
      <img src={stone} alt="crystal" className="crystal-icon" />
      <span className="crystal-count">5</span>
    </div>
    <div className="solve-task-button-inline">
      <button className={isInputFilled ? 'active' : ''} onClick={handleSolveTask}>–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É</button>
    </div>
  </div>
</div>
    </>
  );
}

function ChatPage() {
  const { chatId } = useParams();
  const location = useLocation();
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const chatContentRef = useRef(null);
  const textareaRef = useRef(null);

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    const el = chatContentRef.current;
    if (!el) return;

    const isAtBottom = el.scrollHeight - el.scrollTop - el.clientHeight < 100;

    if (isAtBottom) {
      el.scrollTop = el.scrollHeight;
    }
  }, [messages]);

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
  useEffect(() => {
    const handleFocus = () => {
      setTimeout(() => {
        const el = chatContentRef.current;
        if (el) {
          el.scrollTop = el.scrollHeight;
        }
      }, 300);
    };

    const textarea = textareaRef.current;
    textarea?.addEventListener('focus', handleFocus);

    return () => {
      textarea?.removeEventListener('focus', handleFocus);
    };
  }, []);

  // Telegram WebApp —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
  useEffect(() => {
    if (window.Telegram?.WebApp?.setViewportStableHeight) {
      window.Telegram.WebApp.setViewportStableHeight(true);
    }
  }, []);

  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const userMessage = location.state?.userMessage;
    if (userMessage) {
      setMessages([
        { from: 'user', text: userMessage },
        {
          from: 'ai',
          text:
            '–†–µ—à–∏–º –∑–∞–¥–∞—á—É –ø–æ —à–∞–≥–∞–º:\n\n1. –ú–∞—à–∞ —Å—ä–µ–ª–∞ 4 —è–±–ª–æ–∫–∞.\n2. –ê–Ω–¥—Ä–µ–π —Å—ä–µ–ª –Ω–∞ 3 –≥—Ä—É—à–∏ –±–æ–ª—å—à–µ, —á–µ–º –ú–∞—à–∞ —è–±–ª–æ–∫:\n4+3=7 –≥—Ä—É—à —Å—ä–µ–ª –ê–Ω–¥—Ä–µ–π\n\n–í—Å–µ–≥–æ —Ñ—Ä—É–∫—Ç–æ–≤:\n4+7=11 —Ñ—Ä—É–∫—Ç–æ–≤\n‚úÖ –û—Ç–≤–µ—Ç: 11 —Ñ—Ä—É–∫—Ç–æ–≤ –±—ã–ª–æ —É –¥–µ—Ç–µ–π.',
        },
      ]);
    }
  }, [location.state]);

  const handleSend = () => {
    if (!input.trim()) return;

    const userMessage = input.trim();
    setMessages((prev) => [...prev, { from: 'user', text: userMessage }]);
    setInput('');

    const loadingMessageId = Date.now();
    setMessages((prev) => [
      ...prev,
      { from: 'ai', text: '...', loading: true, id: loadingMessageId },
    ]);

    setTimeout(() => {
      setMessages((prev) =>
        prev.map((msg) =>
          msg.id === loadingMessageId
            ? {
                ...msg,
                loading: false,
                text:
                  '–†–µ—à–∏–º –∑–∞–¥–∞—á—É –ø–æ —à–∞–≥–∞–º:\n\n1. –ú–∞—à–∞ —Å—ä–µ–ª–∞ 4 —è–±–ª–æ–∫–∞.\n2. –ê–Ω–¥—Ä–µ–π —Å—ä–µ–ª –Ω–∞ 3 –≥—Ä—É—à–∏ –±–æ–ª—å—à–µ‚Ä¶\n\n‚úÖ –û—Ç–≤–µ—Ç: 11 —Ñ—Ä—É–∫—Ç–æ–≤.',
              }
            : msg
        )
      );
    }, 2000);

    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
    }
  };

  const handleInputChange = (e) => {
    setInput(e.target.value);

    const textarea = e.target;
    textarea.style.height = 'auto';
    textarea.style.height = Math.min(textarea.scrollHeight, 150) + 'px';
  };

  return (
    <div className="chat-page">
      <div className="chat-header">
        <div className="balance-display">üíé 1236</div>
      </div>

      <div className="chat-content" ref={chatContentRef}>
        {messages.map((msg, i) => (
          <div key={i} className={`chat-bubble ${msg.from}`}>
            {msg.loading ? <TypingDots /> : <div>{msg.text}</div>}
          </div>
        ))}
      </div>

      <div className="chat-input-container">
        <textarea
          ref={textareaRef}
          className="chat-input"
          value={input}
          onChange={handleInputChange}
          placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å"
          rows={1}
        />
        <button className="send-button" onClick={handleSend}>
          ‚Üë
        </button>
      </div>
    </div>
  );
}

function TypingDots() {
  return (
    <div class="typing-container">
      <img src={teacher} alt="teacher" class="company-icon"/>
      <div class="typing-dots">
        <span class="dot1"></span>
        <span class="dot2"></span>
        <span class="dot3"></span>
      </div>
    </div>
  );
}
function ProfilePage() {
  return <div style={{padding:"20px 16px", fontSize: "20px", color: "#0C0C0C", fontWeight: "500"}}>

  <div class="profile-card">
    <div class="user-info">
      <div class="user-name">Artem</div>
      <div class="user-id">
        id: 1155353586
      </div>
    </div>
    <div class="balance-info">
      <div class="balance-label">–ë–∞–ª–∞–Ω—Å</div>
      <div class="balance-value">üíé 5</div>
    </div>
  </div>
  </div>;
}

function RequestsPage() {
  return <div style={{padding:"20px 16px", fontSize: "20px", color: "#0C0C0C", fontWeight: "500"}}>–ó–∞–ø—Ä–æ—Å—ã</div>;
}

function HistoryPage() {
const arr = [
  {
    id: 0,
    title: `–ú–∞—à–∞ —Å—ä–µ–ª–∞ 4 —è–±–ª–æ–∫–∞, –∞ –ê–Ω–¥—Ä–µ–π –Ω–∞ 3 –≥—Ä—É—à–∏ –±–æ–ª—å—à–µ. –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —Ñ—Ä—É–∫—Ç–æ–≤ –±—ã–ª–æ —É –¥–µ—Ç–µ–π?`
  },
  {
    id: 1,
    title: `2 –ª—ã–∂–Ω–∏–∫–∞ –µ—Ö–∞–ª–∏ –Ω–∞–≤—Å—Ç—Ä–µ—á—É –¥—Ä—É–≥ –¥—Ä—É–≥—É —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 10 –∫–º/—á`
  },
  {
    id: 2,
    title: `–û–±—ä—è—Å–Ω–∏ —Ç–µ–º—É –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –∏ –∫–æ—Ä–Ω–µ–π`
  },
  {
    id: 3,
    title: `–ö–∞–∫ —Ä–µ—à–∞—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –¥–≤—É–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏?`
  },
  {
    id: 4,
    title: `–ü–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç—ã —Å —Ä–µ—à–µ–Ω–∏–µ–º`
  },
  {
    id: 5,
    title: `–í —á—ë–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø–ª–æ—â–∞–¥—å—é –∏ –ø–µ—Ä–∏–º–µ—Ç—Ä–æ–º?`
  },
  {
    id: 6,
    title: `–ß—Ç–æ —Ç–∞–∫–æ–µ –¥—Ä–æ–±–∏ –∏ –∫–∞–∫ –∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?`
  },
  {
    id: 7,
    title: `–ï—Å–ª–∏ –ø–æ–µ–∑–¥ –≤—ã–µ—Ö–∞–ª –≤ 8:00 –∏ –µ—Ö–∞–ª 3 —á–∞—Å–∞, –≤–æ —Å–∫–æ–ª—å–∫–æ –æ–Ω –ø—Ä–∏–µ–¥–µ—Ç?`
  },
  {
    id: 8,
    title: `–ü—Ä–æ–≤–µ—Ä—å –º–æ—ë —Å–æ—á–∏–Ω–µ–Ω–∏–µ –Ω–∞ –æ—à–∏–±–∫–∏`
  },
  {
    id: 9,
    title: `–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–æ —É–º–Ω–æ–∂–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π?`
  },
  {
    id: 10,
    title: `–ù–∞–π–¥–∏ –æ—à–∏–±–∫—É –≤ —Ä–µ—à–µ–Ω–∏–∏: 2x + 3 = 7, x = 1`
  },
  {
    id: 11,
    title: `–û–±—ä—è—Å–Ω–∏, –∫–∞–∫ –¥–µ–ª–∏—Ç—å —É–≥–æ–ª –ø–æ–ø–æ–ª–∞–º`
  },
  {
    id: 12,
    title: `–ü–æ–º–æ–≥–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω —Ä–∞—Å—Å–∫–∞–∑–∞ –ø–æ —Ç–µ–º–µ "–õ–µ—Ç–æ" –¥–ª—è 3 –∫–ª–∞—Å—Å–∞`
  },
  {
    id: 13,
    title: `–ß–µ–º –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –∞–º—ë–±–∞ –∏ –∏–Ω—Ñ—É–∑–æ—Ä–∏—è?`
  },
  {
    id: 14,
    title: `–ß—Ç–æ —Ç–∞–∫–æ–µ –º–µ—Ç–∞—Ñ–æ—Ä–∞? –ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã`
  }
];

function truncateText(text, maxLength = 60) {
  if (!text) return '';
  return text.length > maxLength ? text.slice(0, maxLength - 1) + '‚Ä¶' : text;
}
  return <div style={{padding:"20px 16px", fontSize: "20px", color: "#0C0C0C", fontWeight: "500"}}>
    <div className='deleteAllChats'>–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã</div>
     <div className="history-scroll-container">
      {arr.map(el => {
        return (
        <div key={el.id} className="historyElementBlock">
          <div className="history-title">{truncateText(el.title, 60)}</div>
          <button className="delete-btn" onClick={() => handleDeleteChat(el.id)}>√ó</button>
        </div>
        )
      })}
     </div>

  </div>;
}

function HelpPage() {
  return <div style={{padding:"20px 16px", fontSize: "20px", color: "#0C0C0C", fontWeight: "500"}}>–ü–æ–º–æ—â—å</div>;
}

export default App;

